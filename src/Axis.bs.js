// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var SVGUtils$ReactTemplate = require("./SVGUtils.bs.js");
var Rectangle$ReactTemplate = require("./Rectangle.bs.js");

var component = ReasonReact.statelessComponent("Axis");

function domainWidth(param) {
  return param[1] - param[0];
}

function range(min, max, step) {
  if (min > max) {
    return /* [] */0;
  } else {
    return /* :: */[
            min,
            range(min + step, max, step)
          ];
  }
}

function calculateTicks(param, tickCount) {
  var max = param[1];
  var min = param[0];
  var tickGap = domainWidth(/* tuple */[
        min,
        max
      ]) / tickCount;
  return range(min, max, tickGap);
}

function make(orientation, domain, tickCount, length, tickSize, thickness, scale, referenceScale, position, _) {
  var match = orientation !== 0 ? /* tuple */[
      SVGUtils$ReactTemplate.translateTransform(Curry._1(referenceScale, position), 0),
      Pervasives.string_of_int(thickness),
      Pervasives.string_of_int(length)
    ] : /* tuple */[
      SVGUtils$ReactTemplate.translateTransform(0, Curry._1(referenceScale, position)),
      Pervasives.string_of_int(length),
      Pervasives.string_of_int(thickness)
    ];
  var height = match[2];
  var width = match[1];
  var transform = match[0];
  var ticks = calculateTicks(domain, tickCount);
  var tickElements = List.map((function (t) {
          var match = orientation !== 0 ? /* tuple */[
              (-tickSize | 0) / 2 | 0,
              Curry._1(scale, t) - (thickness / 2 | 0) | 0,
              tickSize,
              thickness
            ] : /* tuple */[
              Curry._1(scale, t) - (thickness / 2 | 0) | 0,
              (-tickSize | 0) / 2 | 0,
              thickness,
              tickSize
            ];
          return ReasonReact.element(/* Some */[Pervasives.string_of_float(t)], /* None */0, Rectangle$ReactTemplate.make(match[0], match[1], match[2], match[3], /* array */[]));
        }), ticks);
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("g", {
                  transform: transform
                }, React.createElement("g", undefined, $$Array.of_list(tickElements)), React.createElement("rect", {
                      height: height,
                      width: width
                    }));
    });
  return newrecord;
}

exports.component = component;
exports.domainWidth = domainWidth;
exports.range = range;
exports.calculateTicks = calculateTicks;
exports.make = make;
/* component Not a pure module */
