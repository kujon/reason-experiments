// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Axis$ReactTemplate = require("./Axis.bs.js");
var SVGUtils$ReactTemplate = require("./SVGUtils.bs.js");
var ScaleUtils$ReactTemplate = require("./ScaleUtils.bs.js");

var component = ReasonReact.statelessComponent("Chart");

var partial_arg_001 = -Pervasives.infinity;

var partial_arg = /* tuple */[
  Pervasives.infinity,
  partial_arg_001
];

function findDomain(param) {
  return List.fold_left((function (param, value) {
                return /* tuple */[
                        Caml_primitive.caml_float_min(param[0], value),
                        Caml_primitive.caml_float_max(param[1], value)
                      ];
              }), partial_arg, param);
}

function findXAndYDomains(data) {
  return /* tuple */[
          findDomain(List.map((function (param) {
                      return param[0];
                    }), data)),
          findDomain(List.map((function (param) {
                      return param[1];
                    }), data))
        ];
}

function make(width, height, padding, data, $staropt$star, $staropt$star$1, _) {
  var xScale = $staropt$star ? $staropt$star[0] : ScaleUtils$ReactTemplate.linear;
  var yScale = $staropt$star$1 ? $staropt$star$1[0] : ScaleUtils$ReactTemplate.linear;
  var canvasWidth = (width - padding[/* left */3] | 0) - padding[/* right */1] | 0;
  var canvasHeight = (height - padding[/* top */0] | 0) - padding[/* bottom */2] | 0;
  var match = findXAndYDomains(data);
  var yDomain = match[1];
  var xDomain = match[0];
  var xScale$1 = Curry._2(xScale, xDomain, /* tuple */[
        0,
        canvasWidth
      ]);
  var yScale$1 = Curry._2(yScale, yDomain, /* tuple */[
        canvasHeight,
        0
      ]);
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      return React.createElement("svg", {
                  height: Pervasives.string_of_int(height),
                  width: Pervasives.string_of_int(width)
                }, React.createElement("g", {
                      transform: SVGUtils$ReactTemplate.translateTransform(padding[/* left */3], padding[/* top */0])
                    }, ReasonReact.element(/* None */0, /* None */0, Axis$ReactTemplate.make(/* X */0, xDomain, 4, canvasWidth, 6, 1, xScale$1, yScale$1, 0.0, /* array */[])), ReasonReact.element(/* None */0, /* None */0, Axis$ReactTemplate.make(/* Y */1, yDomain, 5, canvasHeight, 6, 1, yScale$1, xScale$1, 0.0, /* array */[]))));
    });
  return newrecord;
}

exports.component = component;
exports.findDomain = findDomain;
exports.findXAndYDomains = findXAndYDomains;
exports.make = make;
/* component Not a pure module */
